using Eshop.Core.src.Entity;
using Eshop.Core.src.RepositoryAbstraction;
using Eshop.Service.src.ServiceAbstraction;

namespace Eshop.Core.src.Service
{
    public class CategoryService : ICategoryService
    {
        private readonly ICategoryRepository _categoryRepository;

        public CategoryService(ICategoryRepository categoryRepository)
        {
            _categoryRepository = categoryRepository;
        }

        public async Task<Category> CreateCategoryAsync(Category category)
        {
            // Business logic for creating a category can be added here
            return await _categoryRepository.CreateCategoryAsync(category);
        }

        public async Task<bool> UpdateCategoryAsync(Guid id, Category category)
        {
            // Ensure the category exists before updating
            var existingCategory = await _categoryRepository.GetCategoryByIdAsync(id);
            if (existingCategory == null)
            {
                throw new KeyNotFoundException("Category not found");
            }

            // Update the category
            category.Id = id;
            return await _categoryRepository.UpdateCategoryAsync(id, category);
        }

        public async Task<Category> GetCategoryByIdAsync(Guid categoryId)
        {
            var category = await _categoryRepository.GetCategoryByIdAsync(categoryId);
            if (category == null)
            {
                throw new KeyNotFoundException("Category not found");
            }
            return category;
        }

        public async Task<IEnumerable<Category>> GetAllCategoriesAsync()
        {
            return await _categoryRepository.GetAllCategoriesAsync();
        }

        public async Task<bool> DeleteCategoryAsync(Guid categoryId)
        {
            var category = await _categoryRepository.GetCategoryByIdAsync(categoryId);
            if (category == null)
            {
                throw new KeyNotFoundException("Category not found");
            }
            return await _categoryRepository.DeleteCategoryAsync(categoryId);
        }

        public async Task<Category> FindByNameAsync(string name)
        {
            var category = await _categoryRepository.FindByNameAsync(name);
            if (category == null)
            {
                throw new KeyNotFoundException("Category not found");
            }
            return category;
        }
    }
}
